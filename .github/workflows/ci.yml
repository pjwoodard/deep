name: ci
on:
  pull_request:
  release:
    types: [ published ]
  push:
    tags:
    branches:
      - main
      - develop

env:
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        compiler:
          - llvm
          - gcc
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        exclude:
          # GCC on both Windows and Mac are not supported
          - os: windows-latest
            compiler: gcc
        include:
          # Windows msvc builds
          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release


    steps:
      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      - uses: actions/checkout@v2

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          developer_mode: ${{ matrix.developer_mode }}
          generator: ${{ matrix.generator }}

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true
          ninja: true
          conan: 2.0.14
          vcpkg: false
          ccache: true
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}
          cppcheck: true
          gcovr: true
          opencppcoverage: true

      - name: Detect Conan Profile
        run: |
          conan profile detect --force

      - name: Run Conan
        run: |
          conan install . --output-folder=./build -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True -s compiler.cppstd="20"

      - name: Configure CMake (Windows MSVC)
        if: (runner.os == 'Windows' && matrix.compiler == 'msvc')
        run: |
          cmake --preset conan-default

      - name: Configure CMake (Unix or Windows LLVM)
        if: runner.os == 'Linux' || (runner.os == 'Windows' && matrix.compiler == 'llvm')
        run: |
          cmake --preset conan-release 

      - name: Build
        run: |
          cmake --build ./build --preset conan-release

      - name: Run Unit Tests
        run: |
          ctest --test-dir build/test/ --output-on-failure
